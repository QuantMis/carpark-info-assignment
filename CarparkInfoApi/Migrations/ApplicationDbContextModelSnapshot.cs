// <auto-generated />
using CarParkInfo.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarparkInfoApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarparkInfoApi.Models.CarPark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CarParkBasement")
                        .HasColumnType("boolean");

                    b.Property<int>("CarParkDecks")
                        .HasColumnType("integer");

                    b.Property<string>("CarParkNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CarParkTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("FreeParking")
                        .HasColumnType("boolean");

                    b.Property<float>("GantryHeight")
                        .HasColumnType("real");

                    b.Property<bool>("NightParking")
                        .HasColumnType("boolean");

                    b.Property<int>("ParkingSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("ShortTermParkingId")
                        .HasColumnType("integer");

                    b.Property<double>("XCoord")
                        .HasColumnType("double precision");

                    b.Property<double>("YCoord")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CarParkTypeId");

                    b.HasIndex("ParkingSystemId");

                    b.HasIndex("ShortTermParkingId");

                    b.ToTable("CarParks");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.CarParkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CarParkTypes");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.ParkingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ParkingSystems");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.ShortTermParking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShortTermParkings");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.UserFavoriteCarPark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CarParkId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserFavoriteCarParks");
                });

            modelBuilder.Entity("CarparkInfoApi.Models.CarPark", b =>
                {
                    b.HasOne("CarparkInfoApi.Models.CarParkType", "CarParkType")
                        .WithMany()
                        .HasForeignKey("CarParkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarparkInfoApi.Models.ParkingSystem", "ParkingSystem")
                        .WithMany()
                        .HasForeignKey("ParkingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarparkInfoApi.Models.ShortTermParking", "ShortTermParking")
                        .WithMany()
                        .HasForeignKey("ShortTermParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkType");

                    b.Navigation("ParkingSystem");

                    b.Navigation("ShortTermParking");
                });
#pragma warning restore 612, 618
        }
    }
}
